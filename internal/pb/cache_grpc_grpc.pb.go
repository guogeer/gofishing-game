// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: internal/pb/cache_grpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	EnterGame(ctx context.Context, in *Request, opts ...grpc.CallOption) (*EnterGameResp, error)
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
	UpdateLoginParams(ctx context.Context, in *LoginParamsReq, opts ...grpc.CallOption) (*Response, error)
	BindPlate(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Response, error)
	GetUserInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserInfo, error)
	GetSimpleUserInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SimpleUserInfo, error)
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
	LoadBin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserBin, error)
	SaveBin(ctx context.Context, in *SaveBinReq, opts ...grpc.CallOption) (*Response, error)
	Visit(ctx context.Context, in *VisitReq, opts ...grpc.CallOption) (*Response, error)
	// log
	Enter(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Response, error)
	Leave(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 配置
	LoadTable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*TableConfig, error)
	LoadAllTable(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cache_LoadAllTableClient, error)
	LoadScript(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ScriptFile, error)
	LoadAllScript(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cache_LoadAllScriptClient, error)
	// 清理账号
	ClearAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Response, error)
	BindAccount(ctx context.Context, in *BindAccountReq, opts ...grpc.CallOption) (*BindAccountResp, error)
	// 批量增加物品日志
	AddSomeItemLog(ctx context.Context, in *ItemReq, opts ...grpc.CallOption) (*Response, error)
	AddSomeItem(ctx context.Context, in *ItemReq, opts ...grpc.CallOption) (*Response, error)
	GetAllClientVersion(ctx context.Context, in *ClientVersion, opts ...grpc.CallOption) (*LastVersion, error)
	// 字典
	QueryDictValue(ctx context.Context, in *DictValue, opts ...grpc.CallOption) (*DictValue, error)
	AddDictValue(ctx context.Context, in *DictValue, opts ...grpc.CallOption) (*DictValue, error)
	// 邮件
	GetMailList(ctx context.Context, in *MailReq, opts ...grpc.CallOption) (*MailResp, error)
	OperateMail(ctx context.Context, in *MailReq, opts ...grpc.CallOption) (*MailResp, error)
	SendMail(ctx context.Context, in *MailReq, opts ...grpc.CallOption) (*MailResp, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) EnterGame(ctx context.Context, in *Request, opts ...grpc.CallOption) (*EnterGameResp, error) {
	out := new(EnterGameResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/EnterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	out := new(CreateAccountResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) UpdateLoginParams(ctx context.Context, in *LoginParamsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/UpdateLoginParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) BindPlate(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/BindPlate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetUserInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/pb.Cache/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetSimpleUserInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SimpleUserInfo, error) {
	out := new(SimpleUserInfo)
	err := c.cc.Invoke(ctx, "/pb.Cache/GetSimpleUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) LoadBin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UserBin, error) {
	out := new(UserBin)
	err := c.cc.Invoke(ctx, "/pb.Cache/LoadBin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) SaveBin(ctx context.Context, in *SaveBinReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/SaveBin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Visit(ctx context.Context, in *VisitReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/Visit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Enter(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/Enter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Leave(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) LoadTable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*TableConfig, error) {
	out := new(TableConfig)
	err := c.cc.Invoke(ctx, "/pb.Cache/LoadTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) LoadAllTable(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cache_LoadAllTableClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], "/pb.Cache/LoadAllTable", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheLoadAllTableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_LoadAllTableClient interface {
	Recv() (*TableConfig, error)
	grpc.ClientStream
}

type cacheLoadAllTableClient struct {
	grpc.ClientStream
}

func (x *cacheLoadAllTableClient) Recv() (*TableConfig, error) {
	m := new(TableConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) LoadScript(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ScriptFile, error) {
	out := new(ScriptFile)
	err := c.cc.Invoke(ctx, "/pb.Cache/LoadScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) LoadAllScript(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cache_LoadAllScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[1], "/pb.Cache/LoadAllScript", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheLoadAllScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_LoadAllScriptClient interface {
	Recv() (*ScriptFile, error)
	grpc.ClientStream
}

type cacheLoadAllScriptClient struct {
	grpc.ClientStream
}

func (x *cacheLoadAllScriptClient) Recv() (*ScriptFile, error) {
	m := new(ScriptFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) ClearAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/ClearAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) BindAccount(ctx context.Context, in *BindAccountReq, opts ...grpc.CallOption) (*BindAccountResp, error) {
	out := new(BindAccountResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/BindAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) AddSomeItemLog(ctx context.Context, in *ItemReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/AddSomeItemLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) AddSomeItem(ctx context.Context, in *ItemReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Cache/AddSomeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetAllClientVersion(ctx context.Context, in *ClientVersion, opts ...grpc.CallOption) (*LastVersion, error) {
	out := new(LastVersion)
	err := c.cc.Invoke(ctx, "/pb.Cache/GetAllClientVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) QueryDictValue(ctx context.Context, in *DictValue, opts ...grpc.CallOption) (*DictValue, error) {
	out := new(DictValue)
	err := c.cc.Invoke(ctx, "/pb.Cache/QueryDictValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) AddDictValue(ctx context.Context, in *DictValue, opts ...grpc.CallOption) (*DictValue, error) {
	out := new(DictValue)
	err := c.cc.Invoke(ctx, "/pb.Cache/AddDictValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetMailList(ctx context.Context, in *MailReq, opts ...grpc.CallOption) (*MailResp, error) {
	out := new(MailResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/GetMailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) OperateMail(ctx context.Context, in *MailReq, opts ...grpc.CallOption) (*MailResp, error) {
	out := new(MailResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/OperateMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) SendMail(ctx context.Context, in *MailReq, opts ...grpc.CallOption) (*MailResp, error) {
	out := new(MailResp)
	err := c.cc.Invoke(ctx, "/pb.Cache/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility
type CacheServer interface {
	EnterGame(context.Context, *Request) (*EnterGameResp, error)
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
	UpdateLoginParams(context.Context, *LoginParamsReq) (*Response, error)
	BindPlate(context.Context, *AccountInfo) (*Response, error)
	GetUserInfo(context.Context, *Request) (*UserInfo, error)
	GetSimpleUserInfo(context.Context, *Request) (*SimpleUserInfo, error)
	Auth(context.Context, *AuthReq) (*AuthResp, error)
	LoadBin(context.Context, *Request) (*UserBin, error)
	SaveBin(context.Context, *SaveBinReq) (*Response, error)
	Visit(context.Context, *VisitReq) (*Response, error)
	// log
	Enter(context.Context, *AccountInfo) (*Response, error)
	Leave(context.Context, *Request) (*Response, error)
	// 配置
	LoadTable(context.Context, *Request) (*TableConfig, error)
	LoadAllTable(*Request, Cache_LoadAllTableServer) error
	LoadScript(context.Context, *Request) (*ScriptFile, error)
	LoadAllScript(*Request, Cache_LoadAllScriptServer) error
	// 清理账号
	ClearAccount(context.Context, *AccountInfo) (*Response, error)
	BindAccount(context.Context, *BindAccountReq) (*BindAccountResp, error)
	// 批量增加物品日志
	AddSomeItemLog(context.Context, *ItemReq) (*Response, error)
	AddSomeItem(context.Context, *ItemReq) (*Response, error)
	GetAllClientVersion(context.Context, *ClientVersion) (*LastVersion, error)
	// 字典
	QueryDictValue(context.Context, *DictValue) (*DictValue, error)
	AddDictValue(context.Context, *DictValue) (*DictValue, error)
	// 邮件
	GetMailList(context.Context, *MailReq) (*MailResp, error)
	OperateMail(context.Context, *MailReq) (*MailResp, error)
	SendMail(context.Context, *MailReq) (*MailResp, error)
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServer struct {
}

func (UnimplementedCacheServer) EnterGame(context.Context, *Request) (*EnterGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGame not implemented")
}
func (UnimplementedCacheServer) CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCacheServer) UpdateLoginParams(context.Context, *LoginParamsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginParams not implemented")
}
func (UnimplementedCacheServer) BindPlate(context.Context, *AccountInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPlate not implemented")
}
func (UnimplementedCacheServer) GetUserInfo(context.Context, *Request) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedCacheServer) GetSimpleUserInfo(context.Context, *Request) (*SimpleUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleUserInfo not implemented")
}
func (UnimplementedCacheServer) Auth(context.Context, *AuthReq) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedCacheServer) LoadBin(context.Context, *Request) (*UserBin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBin not implemented")
}
func (UnimplementedCacheServer) SaveBin(context.Context, *SaveBinReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBin not implemented")
}
func (UnimplementedCacheServer) Visit(context.Context, *VisitReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Visit not implemented")
}
func (UnimplementedCacheServer) Enter(context.Context, *AccountInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedCacheServer) Leave(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedCacheServer) LoadTable(context.Context, *Request) (*TableConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTable not implemented")
}
func (UnimplementedCacheServer) LoadAllTable(*Request, Cache_LoadAllTableServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadAllTable not implemented")
}
func (UnimplementedCacheServer) LoadScript(context.Context, *Request) (*ScriptFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadScript not implemented")
}
func (UnimplementedCacheServer) LoadAllScript(*Request, Cache_LoadAllScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadAllScript not implemented")
}
func (UnimplementedCacheServer) ClearAccount(context.Context, *AccountInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAccount not implemented")
}
func (UnimplementedCacheServer) BindAccount(context.Context, *BindAccountReq) (*BindAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAccount not implemented")
}
func (UnimplementedCacheServer) AddSomeItemLog(context.Context, *ItemReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSomeItemLog not implemented")
}
func (UnimplementedCacheServer) AddSomeItem(context.Context, *ItemReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSomeItem not implemented")
}
func (UnimplementedCacheServer) GetAllClientVersion(context.Context, *ClientVersion) (*LastVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClientVersion not implemented")
}
func (UnimplementedCacheServer) QueryDictValue(context.Context, *DictValue) (*DictValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDictValue not implemented")
}
func (UnimplementedCacheServer) AddDictValue(context.Context, *DictValue) (*DictValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDictValue not implemented")
}
func (UnimplementedCacheServer) GetMailList(context.Context, *MailReq) (*MailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailList not implemented")
}
func (UnimplementedCacheServer) OperateMail(context.Context, *MailReq) (*MailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateMail not implemented")
}
func (UnimplementedCacheServer) SendMail(context.Context, *MailReq) (*MailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_EnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).EnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/EnterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).EnterGame(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_UpdateLoginParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).UpdateLoginParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/UpdateLoginParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).UpdateLoginParams(ctx, req.(*LoginParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_BindPlate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).BindPlate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/BindPlate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).BindPlate(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetUserInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetSimpleUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetSimpleUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/GetSimpleUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetSimpleUserInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_LoadBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).LoadBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/LoadBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).LoadBin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_SaveBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).SaveBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/SaveBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).SaveBin(ctx, req.(*SaveBinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Visit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Visit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/Visit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Visit(ctx, req.(*VisitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/Enter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Enter(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Leave(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_LoadTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).LoadTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/LoadTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).LoadTable(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_LoadAllTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).LoadAllTable(m, &cacheLoadAllTableServer{stream})
}

type Cache_LoadAllTableServer interface {
	Send(*TableConfig) error
	grpc.ServerStream
}

type cacheLoadAllTableServer struct {
	grpc.ServerStream
}

func (x *cacheLoadAllTableServer) Send(m *TableConfig) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_LoadScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).LoadScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/LoadScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).LoadScript(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_LoadAllScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).LoadAllScript(m, &cacheLoadAllScriptServer{stream})
}

type Cache_LoadAllScriptServer interface {
	Send(*ScriptFile) error
	grpc.ServerStream
}

type cacheLoadAllScriptServer struct {
	grpc.ServerStream
}

func (x *cacheLoadAllScriptServer) Send(m *ScriptFile) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_ClearAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).ClearAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/ClearAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ClearAccount(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_BindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).BindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/BindAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).BindAccount(ctx, req.(*BindAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_AddSomeItemLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).AddSomeItemLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/AddSomeItemLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).AddSomeItemLog(ctx, req.(*ItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_AddSomeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).AddSomeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/AddSomeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).AddSomeItem(ctx, req.(*ItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetAllClientVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetAllClientVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/GetAllClientVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetAllClientVersion(ctx, req.(*ClientVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_QueryDictValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).QueryDictValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/QueryDictValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).QueryDictValue(ctx, req.(*DictValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_AddDictValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).AddDictValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/AddDictValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).AddDictValue(ctx, req.(*DictValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetMailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetMailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/GetMailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetMailList(ctx, req.(*MailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_OperateMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).OperateMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/OperateMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).OperateMail(ctx, req.(*MailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).SendMail(ctx, req.(*MailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterGame",
			Handler:    _Cache_EnterGame_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Cache_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateLoginParams",
			Handler:    _Cache_UpdateLoginParams_Handler,
		},
		{
			MethodName: "BindPlate",
			Handler:    _Cache_BindPlate_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Cache_GetUserInfo_Handler,
		},
		{
			MethodName: "GetSimpleUserInfo",
			Handler:    _Cache_GetSimpleUserInfo_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Cache_Auth_Handler,
		},
		{
			MethodName: "LoadBin",
			Handler:    _Cache_LoadBin_Handler,
		},
		{
			MethodName: "SaveBin",
			Handler:    _Cache_SaveBin_Handler,
		},
		{
			MethodName: "Visit",
			Handler:    _Cache_Visit_Handler,
		},
		{
			MethodName: "Enter",
			Handler:    _Cache_Enter_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Cache_Leave_Handler,
		},
		{
			MethodName: "LoadTable",
			Handler:    _Cache_LoadTable_Handler,
		},
		{
			MethodName: "LoadScript",
			Handler:    _Cache_LoadScript_Handler,
		},
		{
			MethodName: "ClearAccount",
			Handler:    _Cache_ClearAccount_Handler,
		},
		{
			MethodName: "BindAccount",
			Handler:    _Cache_BindAccount_Handler,
		},
		{
			MethodName: "AddSomeItemLog",
			Handler:    _Cache_AddSomeItemLog_Handler,
		},
		{
			MethodName: "AddSomeItem",
			Handler:    _Cache_AddSomeItem_Handler,
		},
		{
			MethodName: "GetAllClientVersion",
			Handler:    _Cache_GetAllClientVersion_Handler,
		},
		{
			MethodName: "QueryDictValue",
			Handler:    _Cache_QueryDictValue_Handler,
		},
		{
			MethodName: "AddDictValue",
			Handler:    _Cache_AddDictValue_Handler,
		},
		{
			MethodName: "GetMailList",
			Handler:    _Cache_GetMailList_Handler,
		},
		{
			MethodName: "OperateMail",
			Handler:    _Cache_OperateMail_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _Cache_SendMail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadAllTable",
			Handler:       _Cache_LoadAllTable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoadAllScript",
			Handler:       _Cache_LoadAllScript_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pb/cache_grpc.proto",
}
